version: '3.3'

networks:
  shared-network:
    driver: bridge

services:
  backend:
    restart: always
    container_name: app
    build:
      context: ./
      dockerfile: ./Dockerfile
    volumes:
      - ../:/usr/src/app
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      NODE_ENV: development
    command: bash -c "node dist/main.js"
    env_file:
        - .env
    networks:
      - shared-network
    ports:
      - ${PORT}:${PORT} # dockerHostPort:dockerContainerPort
    depends_on:
      - postgres
      - redis_cache

  postgres:
    restart: always
    env_file:
      - .env
    image: postgres:alpine
    container_name: app_postgres
    networks:
      - shared-network
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  # mongodb:
  #   restart: always
  #   container_name: redis_cache
  #   image: mongo:latest
  #   # networks:
  #   #   - shared-network
  #   volumes:
  #     - ./.mongo:/data/db
  #   env_file:
  #     - .env
  #   ports:
  #     - ${MONGO_PORT}:${MONGO_PORT}
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  #   restart: always

  cache_redis:
    restart: always
    container_name: redis_cache
    image: 'redis:alpine'
    networks:
      - shared-network
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}